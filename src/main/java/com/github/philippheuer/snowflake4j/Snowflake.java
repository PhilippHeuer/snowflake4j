package com.github.philippheuer.snowflake4j;

import com.github.philippheuer.snowflake4j.util.SnowflakeBitField;
import lombok.Builder;
import lombok.Getter;
import lombok.ToString;

import java.time.Instant;

/**
 * Snowflake Object
 * <p>
 * Can be parsed from a epochOffset + id, or generated by the generator.
 */
@ToString
public class Snowflake {

    public static SnowflakeBitField EPOCH_BITFIELD = new SnowflakeBitField(0x7FFFFFFFFFC00000L);
    public static SnowflakeBitField NODEID_BITFIELD = new SnowflakeBitField(0x3FF000L);
    public static SnowflakeBitField SEQUENCE_BITFIELD = new SnowflakeBitField(0xFFFL);

    @Getter
    private final long epochOffset;

    @Getter
    private final Instant timestamp;

    @Getter
    private final int nodeId;

    @Getter
    private final int sequenceId;

    private Long id;

    @Builder
    public Snowflake(long epochOffset, Instant timestamp, int nodeId, int sequenceId) {
        this.epochOffset = epochOffset;
        this.timestamp = timestamp;
        this.nodeId = nodeId;
        this.sequenceId = sequenceId;
    }

    /**
     * <p>Gets the snowflake id (Thread-Save)</p>
     */
    public synchronized long getId() {
        if (id != null) {
            return id;
        }

        id = 0L;
        id = EPOCH_BITFIELD.setLongValue(id, timestamp.toEpochMilli() - epochOffset);
        id = NODEID_BITFIELD.setIntValue(id, nodeId);
        id = SEQUENCE_BITFIELD.setIntValue(id, sequenceId);
        return id;
    }

    /**
     * Parses a snowflake id into a snowflake
     *
     * @param epochOffset Epoch Offset used in ID-Generation
     * @param id ID
     * @return Snowflake
     */
    public static Snowflake fromSnowflake(long epochOffset, long id) {
        long epochMillis = EPOCH_BITFIELD.getLongValue(id) + epochOffset;
        int nodeId = NODEID_BITFIELD.getIntValue(id);
        int sequenceId = SEQUENCE_BITFIELD.getIntValue(id);

        return Snowflake.builder().epochOffset(epochOffset).timestamp(Instant.ofEpochMilli(epochMillis)).nodeId(nodeId).sequenceId(sequenceId).build();
    }

}
